@model ManagementPortal.Api.Views.Applications.ApplicationCreatedPopup

<style>
    /* Add styles to make the modal work well with the rest of the page */
    body.overflow-hidden {
        overflow: hidden;
        padding-right: 15px; /* Prevent layout shift when scrollbar disappears */
    }

    /* Make sure inputs and buttons are easily selectable */
    #applicationCreatedModal input[readonly] {
        cursor: text;
    }

    #applicationCreatedModal button {
        cursor: pointer;
    }
</style>

<!-- Tailwind Modal -->
<div class="fixed z-50 inset-0 overflow-y-auto" id="applicationCreatedModal" aria-labelledby="applicationCreatedModalLabel" style="background-color: rgba(0, 0, 0, 0.5);">
    <div class="flex items-center justify-center min-h-screen pt-16 px-4 pb-20 text-center sm:block sm:p-0">
        <!-- This element is to trick the browser into centering the modal contents -->
        <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>

        <!-- Modal panel -->
        <div class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
            <div class="bg-green-600 px-4 py-3 sm:px-6 flex justify-between items-center">
                <h3 class="text-lg leading-6 font-medium text-white" id="applicationCreatedModalLabel">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 inline mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                    </svg>
                    Application Created Successfully
                </h3>
                <button type="button" class="text-white hover:text-gray-200 focus:outline-none" id="closeModal">
                    <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>

            <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                <div class="bg-blue-50 border-l-4 border-blue-500 p-4 mb-4">
                    <div class="flex">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-blue-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        <div class="ml-3">
                            <p class="text-sm text-blue-700">
                                <span class="font-medium">Important:</span> Please save the information below as it may not be available again.
                            </p>
                        </div>
                    </div>
                </div>

                <div class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Client ID</label>
                        <div class="mt-1 flex rounded-md shadow-sm">
                            <input type="text" readonly value="@Model.ClientId" class="flex-1 min-w-0 block w-full px-3 py-2 rounded-l-md border border-gray-300 bg-gray-50 text-gray-900 sm:text-sm" />
                            <button type="button" onclick="copyToClipboard(this)" class="inline-flex items-center px-3 py-2 border border-l-0 border-gray-300 rounded-r-md bg-gray-50 text-gray-500 hover:bg-gray-100">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3" />
                                </svg>
                            </button>
                        </div>
                    </div>

                    @if (Model.ClientType == Core.OpenIdApplication.ClientType.Confidential && !string.IsNullOrEmpty(Model.ClientSecret))
                    {
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Client Secret</label>
                            <div class="mt-1 flex rounded-md shadow-sm">
                                <input type="text" readonly value="@Model.ClientSecret" class="flex-1 min-w-0 block w-full px-3 py-2 rounded-l-md border border-gray-300 bg-gray-50 text-gray-900 sm:text-sm" />
                                <button type="button" onclick="copyToClipboard(this)" class="inline-flex items-center px-3 py-2 border border-l-0 border-gray-300 rounded-r-md bg-gray-50 text-gray-500 hover:bg-gray-100">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3" />
                                    </svg>
                                </button>
                            </div>
                            <p class="mt-1 text-sm text-red-600">Please save this client secret. It will not be shown again.</p>
                        </div>
                    }
                </div>
            </div>

            <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                <a href="@Url.Action("Index", "Applications")" class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-indigo-600 text-base font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:ml-3 sm:w-auto sm:text-sm">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 10h16M4 14h16M4 18h16" />
                    </svg>
                    Back to Applications List
                </a>
            </div>
        </div>
    </div>
</div>

<script>
    // Initialize right away - don't wait for DOMContentLoaded
    const modal = document.getElementById('applicationCreatedModal');

    // Make sure modal is displayed
    if (modal) {
        // Show the modal
        modal.style.display = 'block';

        // Make the rest of the page non-interactive but still visible
        document.body.classList.add('overflow-hidden');

        // Function to close the modal and redirect
        function closeModalAndRedirect() {
            modal.style.display = 'none';
            document.body.classList.remove('overflow-hidden');
            window.location.href = '@Url.Action("Index", "Applications")';
        }

        // Close modal when close button is clicked
        const closeButton = document.getElementById('closeModal');
        if (closeButton) {
            closeButton.addEventListener('click', closeModalAndRedirect);
        }

        // Close modal when clicking outside the modal content
        modal.addEventListener('click', function(event) {
            // Only close if clicking directly on the backdrop, not on the modal content
            if (event.target === modal) {
                closeModalAndRedirect();
            }
        });
    }

    // Copy to clipboard function
    function copyToClipboard(button) {
        const input = button.parentElement.querySelector('input');
        input.select();
        document.execCommand('copy');

        // Change icon to checkmark for feedback
        const originalInnerHTML = button.innerHTML;
        button.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
            </svg>
        `;
        button.classList.remove('text-gray-500');
        button.classList.add('text-green-500');

        // Revert to original after 1.5 seconds
        setTimeout(() => {
            button.innerHTML = originalInnerHTML;
            button.classList.remove('text-green-500');
            button.classList.add('text-gray-500');
        }, 1500);
    }
</script>
